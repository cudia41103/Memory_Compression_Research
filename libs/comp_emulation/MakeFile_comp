#Makefile for Legacy ICE Mode (Standalone) for VeloceOS3 flow 
#standalone_tutorial_1 
#Author-Sameer Ghewari, April 2015


MODE ?= veloce

#make all does everything
all: clean work build run

#Create respective work libs and map them 
work:
	vlib work.$(MODE)
	vmap work work.$(MODE)
	
#Compile/synthesize the environment
build:
	vlog compressor_pkg.sv			#Compile the package
	vlog top_tb.sv			#Compile the testbench 
ifeq ($(MODE),puresim)		#If mode is puresim, compile everything else
	vlog Comparator.sv				#Compile the interface
	vlog comp_if.sv
	vlog compinput.sv					#Compile the booth DUT 
	vlog top_hdl.sv				#Compule the HDL top 
	vlog CompressedValues.sv
	vlog compressor_top.sv
	vlog hashFunction.sv
	vlog tableofPtr.sv
	velhvl -sim $(MODE)
else						#else, synthesize!
	velanalyze compressor_pkg.sv		#Analyze the package for synthesis 
	velanalyze -extract_hvl_info +define+QUESTA top_tb.sv	#Analyze the HVL for external task calls in BFM 
	velanalyze comp_if.sv
	velanalyze top_hdl.sv		#Analyze the HDL top for synthesis 
	velanalyze Comparator.sv				#Compile the interface
	velanalyze compinput.sv					#Compile the booth DUT 
	velanalyze CompressedValues.sv
	velanalyze compressor_top.sv
	velanalyze hashFunction.sv
	velanalyze tableofPtr.sv
	velcomp -top top_hdl  	#Synthesize!
	velhvl -sim $(MODE) 
endif

run:
	vsim -c -do "run -all" top_tb top_hdl	#Run all 
	cp transcript transcript.$(MODE)		#Record transcript 

norun:	#No run lets you control stepping etc. 
	vsim -c +tbxrun+norun top_tb top_hdl -cpppath $(CPP_PATH)
	cp transcript transcript.$(MODE)

clean:
	rm -rf tbxbindings.h modelsim.ini transcript.veloce transcript.puresim work work.puresim work.veloce transcript *~ vsim.wlf *.log dgs.dbg dmslogdir veloce.med veloce.wave veloce.map velrunopts.ini edsenv 
	

